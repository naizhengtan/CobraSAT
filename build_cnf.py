class CNFBuilder:

    def __init__(self):
        self.vars = {}
        self.var_num = 1
        self.clauses = []

    def Bool(self, name):
        if name in self.vars:
            return self.vars[name]
        else:
            self.vars[name] = self.var_num
            self.var_num += 1
            return self.vars[name]
    
    def Implies(self, var1, var2):
        return Or(Not(var1), var2)

    def Or(self, *args):
        return [*args]

    def append(self, or_clause):
        self.clauses.append(or_clause)

    def Not(self, var):
        return -var
    
    def __str__(self):
        return self.serialize()
    
    def serialize(self):
        lines = ['c'
                 'c generated by mike',
                 'c']
        lines.append('p cnf ' + str(len(self.vars)) + ' ' + str(len(self.clauses)))
        for clause in self.clauses:
            lines.append(' '.join([str(c) for c in clause]) + ' 0')
        
        return '\n'.join(lines)
    
    def aliases(self):
        return (self.Bool, self.Not, self.Or, self.Implies)
            

def simple_cnf():
    # test from: https://people.sc.fsu.edu/~jburkardt/data/cnf/cnf.html
    b = CNFBuilder()
    Bool, Not, Or, Implies = b.aliases()
    
    Bool('x1')
    Bool('x2')
    Bool('x3')

    b.append(Or(Bool('x1'), Not(Bool('x3'))))
    b.append(Or(Bool('x2'), Bool('x3'), Not(Bool('x1'))))

    print(str(b))

    print('Expected:')
    print('''p cnf 3 2
1 -3 0
2 3 -1 0''')

def encode_tc1():
    
def main():


if __name__ == "__main__":
    main()
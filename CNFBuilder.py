class CNFBuilder:

    def __init__(self):
        self.vars = {}
        self.var_num = 1
        self.clauses = []

    def Bool(self, name):
        if name in self.vars:
            return self.vars[name]
        else:
            self.vars[name] = self.var_num
            self.var_num += 1
            return self.vars[name]
    
    def Implies(self, var1, var2):
        return self.Or(self.Not(var1), var2)

    def Or(self, *args):
        return [*args]
    
    def append_Xor(self, var1, var2):
        Bool, Not, Or, Implies = self.aliases()
        # xor is associative
        self.clauses.append(Or(Not(var1), Not(var2)))
        self.clauses.append(Or(var1, var2))

    def append(self, or_clause):
        if isinstance(or_clause, list):
            self.clauses.append(or_clause)
        else:
            self.clauses.append([or_clause])

    def Not(self, var):
        return -var
    
    def __str__(self):
        return self.serialize()
    
    def serialize(self):
        lines = ['c',
                 'c generated by mike',
                 'c']
        lines.append('p cnf ' + str(len(self.vars)) + ' ' + str(len(self.clauses)))
        for clause in self.clauses:
            lines.append(' '.join([str(c) for c in clause]) + ' 0')
        
        return '\n'.join(lines)
    
    def aliases(self):
        return (self.Bool, self.Not, self.Or, self.Implies)